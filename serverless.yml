service: s3uploader
# app and org for use with dashboard.serverless.com
app: s3uploader
#org: kyle138

frameworkVersion: '3'
package:
  patterns:
    - '!README.md'
    - '!LICENSE'
    - '!config/config*'
    - 'config/mimetypes.js'
    - '!static/**'
    - '!sample_post*'

custom:
  stage: ${opt:stage, "dev1"}
  s3config: ${file(./config/config.json):${self:custom.stage}}
  notificationSnsTopic: "S3Uploader-notifications-${self:provider.stage}"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 180
  region: us-east-1
  stage: ${self:custom.stage}
  httpApi:
    cors: true
  environment:
    S3BUCKET: ${self:custom.s3config.bucket}
# IAM policies
  iamRoleStatements:
    # Grant access to create and handle S3 multipart uploads.
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetBucketLocation"
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:AbortMultipartUpload"
        - "s3:ListBucketMultipartUploads"
        - "s3:ListMultipartUploadParts"
      Resource: arn:aws:s3:::${self:custom.s3config.bucket}*
    # Grant access to publish to SNS
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - Ref: "NotificationsTopic"

# layers
layers:
  commonModules:
    path: layers/CommonModules
    compatibleRuntimes:
      - nodejs14.x
    name: ${self:provider.stage}-s3uploader-commonModules
    description: "s3client s3presigner create-response-object"

functions:
  initiator:
    handler: lambdas/initiator.handler
    description: "triggered by APIG, initiates anonymous S3 multipart upload, returns UploadId and Key."
    timeout: 28
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /post/initiate'
  presigner:
    handler: lambdas/presigner.handler
    description: "triggered by APIG, returns presigned URLs for putPart anonymous upload to S3 bucket."
    environment:
      EXPUP: ${self:custom.s3config.expup}
    memorySize: 256
    timeout: 28
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /post/presign'
  terminator:
    handler: lambdas/terminator.handler
    description: "triggered by APIG, Completes the multipart upload."
    environment:
      EXPDN: ${self:custom.s3config.expdn}
      NOTIFICATIONS_SNS_TOPIC: {Ref: NotificationsTopic}
      KEYPAIRID: ${self:custom.s3config.keypairid}
      PRIVATEKEY: ${self:custom.s3config.privatekey}
    timeout: 28
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /post/terminate'
  cancelator:
    handler: lambdas/cancelator.handler
    description: "triggered by APIG, Aborts the multipart upload."
    timeout: 28
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /post/cancelate'

# CloudFormation resources
resources:
  Resources:
    NotificationsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "${self:custom.notificationSnsTopic}"

outputs:
  SnsTopic:
    Description: "SNS Topic for upload notifications"
    Value: {Ref: NotificationsTopic}
