service: s3uploaderpresigner
# app and org for use with dashboard.serverless.com
app: s3uploader
#org: kyle138

frameworkVersion: '2'
package:
  patterns:
    - '!README.md'
    - '!LICENSE'
    - '!config/config_example.json'
#    - include-me.js
#    - include-me-dir/**

custom:
  stage: ${opt:stage, "dev1"}
  s3config: ${file(./config/config.json):${self:custom.stage}}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 180
  region: us-east-1
  stage: ${self:custom.stage}
  httpApi:
    cors: true
  environment:
    S3BUCKET: ${self:custom.s3config.bucket}
# IAM policies
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetBucketLocation"
        - "s3:PutObject"
      Resource: arn:aws:s3:::${self:custom.s3config.bucket}
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# layers
layers:
  commonModules:
    path: layers/CommonModules
    compatibleRuntimes:
      - nodejs14.x
    name: ${self:provider.stage}-s3uploader-commonModules
    description: "s3client s3presigner create-response-object"

functions:
  s3uploaderpresigner:
    handler: lambdas/s3uploaderpresigner.handler
    description: "triggered by APIG, returns presigned URLs for anonymous upload to S3 bucket."
    timeout: 28
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /post/getupu'
#      - s3: ${env:BUCKET}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
